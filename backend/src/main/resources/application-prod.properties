# application-prod.properties
# 운영 환경 CORS 설정 (CloudFront 주소)
cors.allowed-origins=https://${CORS_DOMAIN}

# 운영 환경 DB 설정 (플레이스홀더 사용)
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
# --- 운영 환경 JPA & Hibernate 상세 설정 ---
# 운영 환경에서는 보통 validate 또는 none을 사용하여, 코드가 실수로 DB 구조를 변경하는 것을 방지합니다.
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# 운영 환경에서는 SQL 로그를 보통 info 레벨로 하거나 끕니다. (성능 저하 방지)
logging.level.org.hibernate.SQL=info
# Java의 Enum을 PostgreSQL의 네이티브 Enum 타입으로 매핑 (필수)
spring.jpa.properties.hibernate.type.preferred_enum_type=pgsql

# --- OAuth2 Client (Google) 운영 환경 설정 ---
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile, email
# jwt 설정
jwt.secret-key=${JWT_SECRET_KEY}
jwt.access-token-validity-in-seconds=${JWT_ACCESS_TOKEN_VALIDITY_IN_SECONDS}
jwt.refresh-token-validity-in-seconds=${JWT_REFRESH_TOKEN_VALIDITY_IN_SECONDS}

# 운영 환경에서는 ALB/프록시가 전달하는 헤더 기반으로 Redirect-URI 계산 필요
server.forward-headers-strategy=framework