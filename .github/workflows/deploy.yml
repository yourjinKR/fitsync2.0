# .github/workflows/deploy.yml

name: CI/CD Pipeline for Spring Boot and React

on:
  push:
    branches: [ "main" ] # main 브랜치에 push될 때 워크플로우 실행
    paths-ignore:
      - "README.md"
      - "**/*.md"
      - "docs/**"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 워크플로우를 실행할 가상 환경

    steps:
    - name: Checkout Code # 1. 코드 체크아웃
      uses: actions/checkout@v3

    # --- Backend CI/CD ---

    - name: Set up JDK 17 # 2. 백엔드 빌드를 위한 JDK 설정
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x ./backend/gradlew

    - name: Build Backend with Gradle # 3. 백엔드 빌드
      run: |
        cd backend
        ./gradlew build

    - name: Set up Docker Buildx # 4. Docker Buildx 설정
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub # 5. Docker Hub 로그인
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Backend Docker image # 6. 백엔드 Docker 이미지 빌드 및 푸시
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        # ✅ 이미지 이름을 'fitsync2'로 사용
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/fitsync2:latest 
    
    # 7. EC2에 백엔드 배포
    - name: Deploy to EC2 
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          # ✅ 'fitsync2' 이미지를 pull
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/fitsync2:latest

          # ✅ 컨테이너 이름을 'fitsync-container'로 통일
          docker stop fitsync-container || true
          docker rm fitsync-container || true
          docker run -d --name fitsync-container \
            -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=prod \
            -e CORS_DOMAIN=${{ secrets.CORS_DOMAIN }} \
            -e SPRING_DATASOURCE_URL=${{ secrets.DB_URL }} \
            -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
            -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
            -e GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
            -e KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} \
            -e KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }} \
            -e NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }} \
            -e NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }} \
            -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
            -e JWT_ACCESS_TOKEN_VALIDITY_IN_SECONDS=${{ secrets.JWT_ACCESS_TOKEN_VALIDITY }} \
            -e JWT_REFRESH_TOKEN_VALIDITY_IN_SECONDS=${{ secrets.JWT_REFRESH_TOKEN_VALIDITY }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/fitsync2:latest

    # --- Frontend CI/CD ---

    - name: Set up Node.js # 8. 프론트엔드 빌드를 위한 Node.js 설정
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install Frontend dependencies and Build # 9. 프론트엔드 의존성 설치 및 빌드
      run: |
        cd frontend
        npm install
        npm run build

    - name: Configure AWS credentials # 10. AWS 자격 증명 설정
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2 # AWS 리전

    - name: Deploy Frontend to S3 # 11. 프론트엔드 빌드 결과물을 S3에 업로드
      run: |
        aws s3 sync ./frontend/dist s3://${{ secrets.S3_BUCKET_NAME }} --delete

    - name: Invalidate CloudFront Cache # 12. CloudFront 캐시 무효화
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
